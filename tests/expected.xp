nonamespace;


const IPC::ADE::CMD_BASE = 1024;

const IPC::ADE::TYPE_BASE = 16778240;

const IPC::ADE::ERR_BASE = 33555456;

enum IPC::ADE::TYPES {
   STATUS = IPC::ADE::TYPE_BASE + 0,
   DEPLOY_PARAMS = IPC::ADE::TYPE_BASE + 1,
};

enum IPC::ADE::CMDS {
   DEPLOY = IPC::ADE::CMD_BASE + 0,
};

enum IPC::ADE::ERRS {
   BAD_TIME = IPC::ADE::ERR_BASE + 0,
};

struct IPC::ADE::Status {
   float time_to_deployment {
      key status_time_to_deployment;
      name "Time to Deployment";
      description "Time until deployment, possibly negative";
      unit "seconds";
   };
   int deployed {
      key status_deployed;
      name "Deployed";
      description "Boolean value representing deployment of sail";
   };
   int pib_temp1 {
      key pib_temp1;
      name "Pib Temperature Sensor 1";
      description "Temperature sensor on the payload interface board";
      unit "C";
   };
   int pib_temp2 {
      key pib_temp2;
      name "Pib Temperature Sensor 2";
      description "Temperature sensor on the payload interface board";
      unit "C";
   };
   int accel_x {
      key accel_x;
      name "Accelerometer X value";
      description "x value of accelerometer reading";
      unit "G/s";
   };
   int accel_y {
      key accel_y;
      name "Accelerometer Y value";
      description "y value of accelerometer reading";
      unit "G/s";
   };
   int accel_z {
      key accel_z;
      name "Accelerometer Z value";
      description "z value of accelerometer reading";
      unit "G/s";
   };
   int gyro_x {
      key gyro_x;
      name "Gyroscope X value";
      description "x value of gyro reading";
      unit "rad/s";
   };
   int gyro_y {
      key gyro_y;
      name "Gyroscope Y value";
      description "y value of gyro reading";
      unit "rad/s";
   };
   int gyro_z {
      key gyro_z;
      name "Gyroscope Z value";
      description "z value of gyro reading";
      unit "rad/s";
   };
   int mag_x {
      key mag_x;
      name "Magnetometer X value";
      description "x value of mag reading";
      unit "rad/s";
   };
   int mag_y {
      key mag_y;
      name "Magnetometer Y value";
      description "y value of mag reading";
      unit "rad/s";
   };
   int mag_z {
      key mag_z;
      name "Magnetometer Z value";
      description "z value of mag reading";
      unit "rad/s";
   };
} = IPC::ADE::TYPES::STATUS;

struct IPC::ADE::DeployParams {
   unsigned int delay {
      key delay;
      description "deployment time delay";
   };
} = IPC::ADE::TYPES::DEPLOY_PARAMS;

command "ade-status" {
   summary "Reports the deployment time and deployment status of the ade payload process";
} = IPC::CMDS::STATUS;

command "deploy" {
   summary "Deploy the drag sail after a specified delay";
   param IPC::ADE::TYPES::DEPLOY_PARAMS;
} = IPC::ADE::CMDS::DEPLOY;
